{"version":3,"file":"index.js","sources":["../lib/GabcSyllabified.ts","../lib/findLatinPhraseAccent.ts","../lib/findLatinWordAccent.ts","../lib/findSpanishPhraseAccent.ts","../lib/findSpanishWordAccent.ts","../lib/VerseText.ts","../lib/shiftGabc.ts","../lib/GabcPsalmTone.ts","../lib/GabcWithTitles.ts"],"sourcesContent":["export class GabcSyllabified {\n  /*-----  REGEX DEFS  -----*/\n  static readonly regexClef = /^[cf]b?[1-4]$/;\n  static readonly regexNonSyllabicGabc = /^([cf]b?[1-4]|[,;:`]+|[a-m]\\+|[zZ]0?)+$/;\n  static readonly regexFindParensWithLeadSpaces = /^(\\s*)\\(([\\s\\S]*)\\)$/;\n  static readonly regexFindParens = /^\\(([\\s\\S]*)\\)$/;\n\n  static merge(syllabifiedText: string, musicalNotation: string, isEaster?: boolean, useLargeInitial: boolean = true) {\n\n    const { text, notation } = GabcSyllabified.normalizeInputs(syllabifiedText, musicalNotation, isEaster);\n\n    if (!notation) return text;\n\n    const { syllables, notationNodes } = GabcSyllabified.splitInputs(text, notation);\n\n    let sylNdx = 0\n    let isFirstSyl = true;\n    let result = notationNodes\n      .map((notation) => {\n        const { syllable, nextIndex, isFirstSyllable } = GabcSyllabified.mapSyllable(notation, syllables, sylNdx, isFirstSyl, useLargeInitial);\n        sylNdx = nextIndex;\n        isFirstSyl = isFirstSyllable;\n        return syllable;\n      })\n      .join('')\n      .trim()\n    ;\n\n    // add any additional syllables that come after the last notation data:\n    while (sylNdx < syllables.length) {\n      result +=\n        syllables[sylNdx++].replace(/^(\\s*)\"?\\(?(.*?)\\)?\"?$/, '$1$2') + '()';\n    }\n    return result;\n  }\n\n  /*-----  NORMALIZATION FUNCTIONS  -----*/\n  static normalizeInputs(text: string, notation: string, isEaster?: boolean) {\n    // normalize the text, getting rid of multiple consecutive whitespace,\n    // and handling lilypond's \\forceHyphen directive\n    // remove flex and mediant symbols if accents are marked with pipes:\n    if (/\\|/.test(text)) {\n      text = text.replace(/\\([†*]\\)|[†*]/g, \"\");\n    }\n\n    text = text.replace(/\\xad/g, \"\")\n      .replace(/\\xa0/g, \" \");\n    let notationMatch: RegExpMatchArray | null = null;\n    const regexEasterTime = /\\s*\\([ET]\\.\\s*[TP]\\.([^)]+)\\)[.!]?\\s*$/;\n    const matchEasterTime = regexEasterTime.exec(text);\n    if (matchEasterTime) {\n      const syllableCount = matchEasterTime[1].split(/\\s+--\\s+|\\s+|\\+|-|\\|([^|\\s]+)\\|/).filter(syl => syl).length;\n      notationMatch = notation.match(`(::|[:;,])((\\\\s+[^,\\`:;\\\\s]+(?:\\\\s+(?:[,\\`]|\\\\([^)]*))*){${syllableCount}}\\\\s+::\\\\s*)$`);\n    }\n    if (typeof isEaster === 'boolean') {\n      if (matchEasterTime) {\n        if (isEaster) {\n          text = text.replace(/([,;:.!?])?\\s*\\([ET]\\.\\s*[TP]\\.\\s*([^)]+)\\)/g, (whole,punctuation,alleluia) => {\n            return `${(punctuation || ',')} ${alleluia}`;\n          });\n          if (notationMatch) notation = notation.slice(0, notationMatch.index) + ';' + notationMatch[2];\n        } else {\n          text = text.replace(regexEasterTime, '.');\n          if (notationMatch) notation = notation.slice(0, notationMatch.index) + '::';\n        }\n      }\n    } else {\n      if (notationMatch && matchEasterTime) notation = notation.slice(0, notationMatch.index) + '::' + notationMatch[2];\n      text = text.replace(\n        /([^,.;:\\s])\\s+\\((E|T)\\.\\s*(T|P)\\.\\s*(a|A)([^\\s+-]*)([^)]+)\\)([,.;:]*)/,\n        `$1$7 \"<i>$2.$3.</i> A$5\"$6$7`\n      );\n    }\n    text = text\n      // remove poetiic tags:\n      .replace(/<\\/?poetic>/g,'')\n\n      // replace rubric tags:\n      .replace(/<rubric>([^<]*)<\\/rubric>/g,'<alt><c><i>$1</alt>')\n      .replace(/(\\s){([^}]+)}(\\s)/g,'$1<alt><c><i>$2</alt>$3')\n\n      .replace(/%[^\\n]*(\\n|$)/g, '$1')\n      .replace(/\\s*\\n\\s*/g, '\\n')\n      .replace(/(\\s)\\s+/g, '$1')\n      .replace(/\\\\forceHyphen\\s+(\\S+)\\s+--\\s+/g, '$1-')\n      .replace(/\\|([^|]+)\\|/g, '+$1+')\n      .replace(/([ -])\\+|\\+([^a-záéíóúýàèìòùäëïöüÿæœǽœ́]*(?:[-\\s]|$))/ig, '$1$2')\n      .replace(/(^|\\s)([^{}\\s]+~[^{}\\s]+)(?=$|\\s)/g,'$1{$2}')\n      .trim()\n    ;\n\n    notation = notation.replace(/%[^\\n]*(\\n|$)/g, '$1').trim();\n\n    return { text, notation }\n  }\n\n\n\n  static splitInputs(text: string, notation: string) {\n    let lastSyl: string;\n    const syllables = text\n      .split(/(\\s*(?:(?:<alt>[\\s\\S]*?<\\/alt>|<h\\d>[\\s\\S]*?<\\/h\\d>)\\s*)+)|\\s+--\\s+|\\+|(\\s*\\(?\"[^\"]+\"\\)?-?)|(\\s*\\([^+)]+\\))|(\\s*[^\\s-+]+-)(?=[^\\s-])|(?=\\s)/)\n      .filter(syl => syl?.trim())\n      .reduce((result, syl) => {\n        // reverse the order when two <alt>s are in a row, and remove whitespace between them:\n        syl = syl.replace(/(?:<alt>.*?<\\/alt>\\s*){2,}/g, (alts) => (\n          alts.split(/(<alt>.*?<\\/alt>)/).reverse().filter(text => !!text.trim()).join('')\n        ));\n        // remove parentheses around verse markers so that they can get concatenated with the next syllable:\n        syl = syl.replace(/^\\(((?:[℣℟]|\\d+)\\.?)\\)$/, '$1');\n        if (/^\\s*(<(alt|h\\d)>|([℣℟]|\\d+)\\.?$)/.test(lastSyl)) {\n          if(syl.startsWith('(') && syl.endsWith(')')) {\n            syl = syl.slice(1);\n            result[result.length - 1] = '(' + result[result.length - 1];\n          }\n          result[result.length - 1] += syl;\n        } else {\n          result.push(syl);\n        }\n        lastSyl = syl;\n        return result;\n      }, [] as string[])\n    ;\n\n    const notationNodes = notation.split(/\\s+/);\n\n    return { syllables, notationNodes };\n  }\n\n  /*-----  STRING UTIL FUNCTIONS  -----*/\n  static stripParens(s: string) {\n    return s.replace(GabcSyllabified.regexFindParensWithLeadSpaces, '$1$2');\n  }\n  static stripNonDisplayCharacters(syllable: string) {\n    return syllable.replace(/^(\\s*)\"?\\(([\\s\\S]*?)\\)\"?$/, '$1$2').replace(/^(\\s*)[!(]/, '$1');\n  }\n  // check whether a syllable text represents a syllable or not,\n  //   It is considered non-syllable if\n  //     * it starts with !\n  //     * it contains no letters\n  //     * it is surrounded by parentheses\n  //     * It starts with a parenthesis and contains only letters and periods, e.g. `(E.T.` or `(T.P.`\n  static isNonSyllableString (s: string) {\n    return /^(?:\\s*<(alt|h\\d)>.*?<\\/\\1>\\s*)*(\\s*!|(\\s*[^\\sa-záéíóúýàèìòùäëïöüÿæœǽœ́][^a-záéíóúýàèìòùäëïöüÿæœǽœ́]*)$|(\\s*\\((?:[\\s\\S]*\\)|[A-Z\\.]+))$|(\\s*\"\\([\\s\\S]*\\)\"$))/i.test(s);\n  }\n\n\n  /*-----  GETTER FUNCTIONS  -----*/\n  static getSyllable(syllables: string[], index: number) {\n    return (syllables[index] || ' ').replace(/\\)([^a-z]*)$/i,\"$1\").replace(/^(\\s*)\"(.*)\"$/, '$1$2');\n  }\n\n  static getNonSyllable(syllables: string[], syllableNdx: number, notation?: string, noSyllable?: boolean): string {\n    let syllable = syllables[syllableNdx];\n\n    const hasAltHTag = /<(alt|h\\d)>/.test(syllable);\n    const isVerseMarker = /^\\s*(\\d+|℣|℟)\\.?/.test(syllable);\n\n    if(\n      GabcSyllabified.isNonSyllableString(syllable) &&\n      !GabcSyllabified.regexClef.test(notation) &&\n      // If there is a GABC notation that does not get a syllable, e.g., a double bar, we need to make sure\n      // that we don't use the text if it has an <h2> tag or an <alt> tag or is a verse marker:\n      (noSyllable !== true || !(hasAltHTag || isVerseMarker))\n    ) {\n      return GabcSyllabified.stripNonDisplayCharacters(syllable);\n    }\n\n    return '';\n  }\n\n  static getNonSyllableOrSpace(syllables: string[], syllableNdx: number, notation?: string): string {\n    return GabcSyllabified.getNonSyllable(syllables, syllableNdx, notation) || ' ';\n  }\n\n  /*-----  PROCESSOR FUNCTIONS  -----*/\n  static mapSyllable(\n    notation: string,\n    syllables: string[],\n    sylNdx: number,\n    isFirstSyllable: boolean,\n    useLargeInitial?: boolean\n  ): { syllable: string, nextIndex: number, isFirstSyllable: boolean } {\n    const noSyllable = GabcSyllabified.regexNonSyllabicGabc.test(notation) || /^\\(.*\\)$/.test(notation);\n    notation = GabcSyllabified.stripParens(notation);\n\n    let nonSyllable = GabcSyllabified.getNonSyllable(syllables, sylNdx, notation, noSyllable);\n    let syllable = noSyllable ? (nonSyllable || \" \") : GabcSyllabified.getSyllable(syllables, sylNdx++);\n    if (noSyllable) {\n      if(/\\S/.test(syllable)) sylNdx++;\n    } else {\n      if (nonSyllable) {\n        syllable = nonSyllable;\n        let nextNonSyllable: string;\n        while ((nextNonSyllable = GabcSyllabified.getNonSyllable(syllables, sylNdx++))) {\n          syllable += `()${nextNonSyllable}`\n        }\n        syllable += `()${GabcSyllabified.getSyllable(syllables, sylNdx - 1)}`\n      }\n\n      if (isFirstSyllable) {\n        isFirstSyllable = false;\n        if(useLargeInitial) {\n          syllable = GabcSyllabified.capitalizeInitial(syllable, syllables[sylNdx]);\n        }\n      }\n    }\n\n    syllable = syllable + '(' + notation + ')';\n\n    return { syllable, nextIndex: sylNdx, isFirstSyllable }\n  }\n\n  static capitalizeInitial(syllable: string, nextSyllable: string): string {\n    const syllableMatch = /^\\s*([a-záéíóúýàèìòùäëïöüÿæœǽœ́]+)/i.exec(syllable)\n    if (syllableMatch) {\n      // special capitalization rules for the large initial:\n      // the second letter should also be capitalized, and the third as well,\n      // if it is a three letter word\n      syllable = syllable.slice(0, 2).toUpperCase() + syllable.slice(2).toLowerCase();\n      if (syllableMatch[1].length === 3 && /^\\s/.test(nextSyllable)) {\n        syllable = syllable.toUpperCase();\n      }\n    }\n\n    return syllable;\n  }\n}\n","import { VerseWord } from \"./VerseText\";\n\nexport function findLatinPhraseAccents(\n  words: VerseWord[]\n) {\n  const allSyllables = words.flatMap((word) => word.syllables);\n  let nextAccentI = allSyllables.length;\n  for (let i = nextAccentI - 1; i >= 0; --i) {\n    const syl = allSyllables[i];\n    if (syl.isAccented) {\n      nextAccentI = i;\n      continue;\n    }\n    if (nextAccentI - i === 3) {\n      nextAccentI = i + 1;\n      allSyllables[nextAccentI].isAccented = true;\n    }\n  }\n  if (nextAccentI === 2) {\n    allSyllables[0].isAccented = true;\n  }\n};\n","import { VerseSyllable } from \"./VerseText\";\n\nexport function findLatinWordAccent(\n  syllables: VerseSyllable[]\n) {\n  if (syllables.length > 1 && syllables.every((syl) => !syl.isAccented)) {\n    if (syllables.length <= 3 && /[AEIOUY]/.test(syllables[0].text)) {\n      // If the first syllable is the penult or ante-penult andit contains a capital vowel, then it is accented according to standard non-usage of accented capitals.\n      syllables[0].isAccented = true;\n    } else {\n      // otherwise, apply accent to the penult\n      syllables[syllables.length - 2].isAccented = true;\n    }\n  }\n};\n","import { VerseWord } from \"./VerseText\";\n\nexport function findSpanishPhraseAccents(\n  words: VerseWord[]\n) {\n  const lastWordSyllables = words[words.length - 1]?.syllables ?? [];\n  if (lastWordSyllables.length === 1) {\n    lastWordSyllables[0].isAccented = true;\n  }\n};\n","import { VerseSyllable } from \"./VerseText\";\n\nexport function findSpanishWordAccent(\n  syllables: VerseSyllable[]\n) {\n  if (syllables.length > 1 && syllables.every((syl) => !syl.isAccented)) {\n    const lastSyllable = syllables[syllables.length - 1];\n    const accentPenult = /[aeiouy][ns]?$/i.test(lastSyllable.text);\n    const accentIndex = accentPenult ? 2 : 1;\n    syllables[syllables.length - accentIndex].isAccented = true;\n  }\n};\n","import { findLatinPhraseAccents } from \"./findLatinPhraseAccent\";\nimport { findLatinWordAccent } from \"./findLatinWordAccent\";\nimport { findSpanishPhraseAccents } from \"./findSpanishPhraseAccent\";\nimport { findSpanishWordAccent } from \"./findSpanishWordAccent\";\nimport { GabcPsalmTone, GabcPsalmTones, GabcSingleTone } from \"./GabcPsalmTone\";\nexport type Syllabifier = (word: string) => string[];\nexport type WordAccentFinder = (word: VerseSyllable[]) => void;\nexport type PhraseAccentFinder = (phrase: VerseWord[]) => void;\nexport type FormattedString = {\n  text: string;\n  style?: \"bold\" | \"italic\" | \"\" | null;\n};\nexport enum VerseSegmentType {\n  Flex = \"flex\",\n  Mediant = \"mediant\",\n  Termination = \"termination\"\n}\nexport type Language = \"en\"|\"es\"|\"la\";\nexport interface VerseGabcOptions {\n  startVersesOnNewLine?: boolean;\n  stripFlexMediantSymbols?: boolean;\n  addSequentialVerseNumbersStartingAt?: number;\n  addInitialVerseNumber?: number | string;\n  minSylsOnRecitingTone?: number;\n  useLargeInitial?: boolean;\n  barDictionary?: { [k in VerseSegmentType]: string };\n};\n\nexport interface VerseTextArgs {\n  text: string,\n  isEaster?: boolean,\n  language?: Language,\n  syllabify?: Syllabifier,\n}\nexport class VerseText {\n  static readonly defaultSyllabify: Syllabifier = (text) =>\n    text\n      .replace(/\\\\forceHyphen\\s+(\\S+)\\s+--\\s+/g, \"$1-\")\n      .replace(/\\s+--\\s+/g, \"+\")\n      .replace(/(\\|\\S+\\|)(\\S)/gi, \"$1+$2\")\n      .replace(/(\\S)(\\|\\S+\\|)/gi, \"$1+$2\")\n      .replace(/(\\S-)(\\S)/gi, \"$1+$2\")\n      .split(/\\+/g);\n  segments: VerseSegment[];\n  stanzas: VerseSegment[][];\n  language: Language;\n\n  /**\n   *\n   * @param text the text to be split into segments\n   * @param syllabify a function that takes a word string and returns an array of its syllables\n   */\n  constructor(\n    text: string | VerseTextArgs,\n    isEaster: boolean | undefined = false,\n    syllabify: Syllabifier = VerseText.defaultSyllabify,\n    language: Language = 'en',\n  ) {\n    if (typeof text === \"object\") {\n      ({ text, isEaster, language, syllabify } = text);\n    }\n    if (isEaster) {\n      text = text.replace(/\\s*([†*]?)\\s*\\(([†*]?)\\)/g, ' $2');\n      text = text.replace(/([,;:.!?])?(\\s+[†*])?(\\s)\\s*\\(E\\.\\s*T\\.\\s*([^)]+)\\)/g, (whole, punctuation, flexMediant, whitespace,alleluia) => {\n        return `${(punctuation || ',')}${flexMediant}${whitespace}${alleluia}`;\n      });\n    } else if (isEaster === false) {\n      text = text.replace(/\\s*([†*]?)\\s*\\(([†*]?)\\)/g, ' $1');\n      text = text.replace(/\\s*\\(E\\.\\s*T\\.[^)]+\\)/g,'');\n    }\n    const stanzas = text.split(/\\n\\s*\\n/);\n    this.stanzas = stanzas.map(stanza => VerseText.splitIntoSegments(stanza, syllabify, language));\n    this.segments = this.stanzas.flat();\n    this.language = language;\n  }\n\n  /**\n   * Returns a verse with GABC\n   * @param  {Object} psalmTone hash of GabcPsalmTones for flex, mediant, and termination\n   * @return {string}           GABC string\n   */\n  withGabc(\n    psalmTone: GabcPsalmTones,\n    {\n      startVersesOnNewLine = false,\n      stripFlexMediantSymbols = true,\n      addSequentialVerseNumbersStartingAt = 0,\n      addInitialVerseNumber,\n      minSylsOnRecitingTone = psalmTone.isGregorianSolemn ? -1 : 2,\n      useLargeInitial = true,\n      barDictionary = {\n        [VerseSegmentType.Flex]: \",\",\n        [VerseSegmentType.Mediant]: \";\",\n        [VerseSegmentType.Termination]: \":\"\n      }\n    }: VerseGabcOptions = {}\n  ) {\n    if (psalmTone.isMeinrad) {\n      // some default overrides for meinrad tones, and a check to make sure there are 2-6 segments\n      const stanzaLengths = this.stanzas.map(segments => segments.length);\n      if (Math.min(...stanzaLengths) < 2 || Math.max(...stanzaLengths) > 6) {\n        throw `Cannot use a Meinrad tone with a [${stanzaLengths.join(', ')}] line text.`;\n      }\n      stripFlexMediantSymbols = true;\n      barDictionary[VerseSegmentType.Flex] = \";\";\n    } else if (psalmTone.isGregorianSolemn) {\n      barDictionary[VerseSegmentType.Flex] = barDictionary[VerseSegmentType.Mediant] = \":\";\n    }\n    let nextSequentialVerseNumber : number | string = addSequentialVerseNumbersStartingAt;\n    if (addInitialVerseNumber !== undefined) {\n      nextSequentialVerseNumber = addInitialVerseNumber;\n    } else {\n      addInitialVerseNumber = 0;\n    }\n    if (nextSequentialVerseNumber <= 0) {\n      nextSequentialVerseNumber = 0;\n    }\n    const getNextVerseNumberString = (stanzaI) => {\n      const { verseMarker } = this.stanzas[stanzaI]?.[0];\n      if (verseMarker) return verseMarker + ' ';\n      if (addInitialVerseNumber) {\n        const result = `${nextSequentialVerseNumber}. `;\n        addInitialVerseNumber = 0;\n        nextSequentialVerseNumber = 0;\n        return result;\n      }\n      return (nextSequentialVerseNumber && typeof nextSequentialVerseNumber === \"number\")\n        ? `${nextSequentialVerseNumber++}. `\n        : \"\";\n    };\n    useLargeInitial =\n      useLargeInitial &&\n      !addSequentialVerseNumbersStartingAt &&\n      !addInitialVerseNumber;\n    let verseMarker: string;\n    return `(${psalmTone.clef}) ` + (\n      this.stanzas.map((stanza, i) =>\n        (verseMarker = getNextVerseNumberString(i)) + \n        this.getStanzaGabc(psalmTone, i, {\n          startVersesOnNewLine,\n          stripFlexMediantSymbols,\n          minSylsOnRecitingTone,\n          useLargeInitial: useLargeInitial && i === 0 && verseMarker === '',\n          barDictionary,\n        })\n      ).join('\\n\\n')\n    );\n  }\n\n  getStanzaGabc(\n    psalmTone: GabcPsalmTones,\n    i: number,\n    {\n      startVersesOnNewLine = false,\n      stripFlexMediantSymbols = true,\n      minSylsOnRecitingTone = 2,\n      useLargeInitial = true,\n      barDictionary = {\n        [VerseSegmentType.Flex]: \",\",\n        [VerseSegmentType.Mediant]: \";\",\n        [VerseSegmentType.Termination]: \":\"\n      },\n    }: VerseGabcOptions = {}\n  ) {\n    const segments = this.stanzas[i];\n    const stanzaCount = segments.filter(\n      (segment) => segment.segmentType === VerseSegmentType.Termination\n    ).length;\n    let stanzaI = 0;\n    let intonationFollowingFlex: GabcSingleTone[] = null;\n    if (psalmTone.isGregorianSolemn) {\n      const termination = psalmTone[VerseSegmentType.Termination];\n      const mediant = psalmTone[VerseSegmentType.Mediant];\n      intonationFollowingFlex = termination.gabc.intonation.flatMap((tone) =>\n        tone.toneAccentFork\n          ? tone.toneAccentFork[tone.toneAccentFork.length - 1]\n          : tone\n      );\n      if (termination.gabc.tenor !== mediant.gabc.tenor) {\n        // handle cases like in tone 6, where the tenor of the termination is different from the tenor of the mediant\n        // by changing the intonation to only include the notes required to get to the tenor pitch\n        let firstMediantTenor = intonationFollowingFlex.findIndex(\n          (tone) => tone.gabc === mediant.gabc.tenor\n        );\n        if (firstMediantTenor < 0) {\n          firstMediantTenor =\n            1 +\n            intonationFollowingFlex.findIndex(\n              (tone) => tone.gabc.indexOf(mediant.gabc.tenor) >= 0\n            );\n        }\n        intonationFollowingFlex = intonationFollowingFlex.slice(\n          0,\n          firstMediantTenor\n        );\n      }\n    }\n    return (\n      segments\n        .map((seg, i, segments) => {\n          let useFlex = seg.segmentType === VerseSegmentType.Flex,\n            segmentName = useFlex ? VerseSegmentType.Mediant : seg.segmentType,\n            tone = psalmTone[segmentName],\n            intonation: boolean | GabcSingleTone[] = false;\n          if (psalmTone.isMeinrad) {\n            tone = psalmTone.lines[segments.length][i];\n            useFlex = false;\n          } else if (psalmTone.lines.length > 1) {\n            let toneIndex;\n            if (psalmTone.lines.length === 2) {\n              toneIndex = stanzaI < stanzaCount - 1 ? 0 : 1;\n            } else {\n              toneIndex = Math.floor(\n                (psalmTone.lines.length * stanzaI) / stanzaCount\n              );\n            }\n            tone = psalmTone.lines[toneIndex][segmentName];\n          }\n          if (psalmTone.isGregorianSolemn) {\n            useFlex = false;\n            intonation = true;\n            if (seg.segmentType === VerseSegmentType.Mediant && segments[i - 1]?.segmentType === VerseSegmentType.Flex) {\n              intonation = intonationFollowingFlex;\n            }\n          }\n          let gabc = seg.withGabc(\n            tone,\n            intonation || i == 0 || i == segments.length - 1, // use intonation on first and last segment, and when required by gregorian solemn tones\n            useFlex,\n            stripFlexMediantSymbols,\n            i === 0 && useLargeInitial,\n            minSylsOnRecitingTone,\n            this.language,\n            psalmTone.isGregorianSolemn\n          );\n          let bar: string;\n          if (psalmTone.isMeinrad) {\n            if (i === 0) {\n              bar = segments.length === 2 ? \";\" : \",\";\n            } else if (i === segments.length - 1) {\n              bar = \"::\";\n            } else {\n              bar = i % 2 === 0 ? \",\" : \";\";\n            }\n          } else {\n            bar = barDictionary[seg.segmentType];\n          }\n          if (seg.segmentType === VerseSegmentType.Termination) {\n            ++stanzaI;\n            if (i === segments.length - 1) {\n              // force a double bar on the last segment:\n              bar = \"::\";\n            } else if (startVersesOnNewLine) {\n              // never add a line break unless it isn't the last segment\n              bar += \"Z\";\n            }\n          }\n          return gabc + ` (${bar})`;\n        })\n        .join(\"\\n\\n\")\n    );\n  }\n\n  toString() {\n    return this.segments\n      .map((seg, i) => {\n        let prevSeg = this.segments[i - 1];\n        let indent =\n          prevSeg && prevSeg.segmentType != VerseSegmentType.Termination;\n        return (indent ? \"\\t\" : \"\") + seg.toString();\n      })\n      .join(\"\\n\");\n  }\n\n  /**\n   * Split a text into segments based on the presence of †, * and \\n.\n   * @param  {string} text          the text to be split\n   * @param  {function} syllabify a function that takes a string containing a single word, and returns an array of strings of the individual syllables.\n   * @return {VerseSegment[]}       the array of VerseSegment objects\n   */\n  static splitIntoSegments(\n    text: string,\n    syllabify = VerseText.defaultSyllabify,\n    language: Language = 'en',\n  ): VerseSegment[] {\n    let segmentSplit = text.split(/[ \\t]*([†*\\n/])(\\s*)/),\n      segments: VerseSegment[] = [];\n    for (let i = 0; i < segmentSplit.length; i += 3) {\n      let text = segmentSplit[i];\n      if (segmentSplit[i + 1]) {\n        text += \" \" + segmentSplit[i + 1];\n      }\n      segments.push(\n        new VerseSegment(\n          text,\n          syllabify,\n          SegmentTypeDictionary[\n            segmentSplit[i + 1] as keyof typeof SegmentTypeDictionary\n          ],\n          segmentSplit[i + 2],\n          language,\n        )\n      );\n    }\n    return segments;\n  }\n}\n\nconst SegmentTypeDictionary = {\n  \"†\": VerseSegmentType.Flex,\n  \"*\": VerseSegmentType.Mediant,\n  \"\\n\": VerseSegmentType.Termination\n};\nexport class VerseSegment {\n  words: VerseWord[];\n  syllables: VerseSyllable[];\n  segmentType: VerseSegmentType;\n  accentedSyllables: VerseSyllable[];\n  additionalWhitespace: string;\n  verseMarker?: string;\n\n  constructor(\n    text: string,\n    syllabify = VerseText.defaultSyllabify,\n    type: VerseSegmentType = VerseSegmentType.Termination,\n    additionalWhitespace?: string,\n    language: Language = 'en',\n  ) {\n    const verseMarkerMatch = /^\\s*(?:\\(([^)]+)\\)|((?:\\d+|[℣℟])\\.?))/.exec(text);\n    if (verseMarkerMatch && !/^[ET]\\.\\s*[TP]\\./.test(verseMarkerMatch[1])) {\n      this.verseMarker = verseMarkerMatch[1] || verseMarkerMatch[2];\n      text = text.slice(verseMarkerMatch[0].length);\n    }\n    this.words = VerseSegment.splitIntoWords(text, syllabify, language);\n\n    this.syllables = [].concat(...this.words.map((word) => word.syllables));\n    this.segmentType = type;\n\n    // mark syllable indices:\n    this.syllables.forEach((syl, i) => (syl.indexInSegment = i));\n    this.syllables\n      .slice()\n      .reverse()\n      .forEach((syl, i) => (syl.indexFromSegmentEnd = i));\n\n    // mark the last two accents as 0 and 1:\n    this.accentedSyllables = this.syllables\n      .filter((syl) => syl.isAccented)\n      .reverse();\n\n    this.additionalWhitespace = additionalWhitespace || \"\";\n  }\n\n  /**\n   * get an array of objects containing a text and a style, based on so many accents and preparatory syllables\n   * @param  {number} accents     number of accents to mark at end\n   * @param  {number} preparatory number of preparatory syllables to mark before the first marked accent\n   * @param  {boolean} onlyMarkFirstPreparatory whether to mark only the first preparatory syllable\n   * @param  {string} syllableSeparator string used to separate syllables within the same word, defaults to \\xAD\n   * @return {Object[]}             Array of {text, style} objects\n   */\n  getFormattedStrings({\n    accents = 0,\n    preparatory = 0,\n    onlyMarkFirstPreparatory = false,\n    syllableSeparator = \"\\xAD\",\n    includeVerseNumbers = false\n  }: {\n    accents?: number;\n    preparatory?: number;\n    onlyMarkFirstPreparatory?: boolean;\n    syllableSeparator?: string;\n    includeVerseNumbers?: boolean;\n  } = {}): FormattedString[] {\n    let markedAccents = this.accentedSyllables.slice(\n      this.accentedSyllables.length - accents\n    );\n    let firstAccentIndex = markedAccents.length\n      ? markedAccents[0].indexInSegment || 0\n      : this.syllables.length;\n    let firstMarkedPreparatoryIndex = Math.max(\n      0,\n      firstAccentIndex - preparatory\n    );\n    let result: FormattedString[] = [];\n    const prefix =\n      (includeVerseNumbers &&\n        this.words[0].verseNumber &&\n        `${this.words[0].verseNumber} `) ||\n      \"\";\n    let workingString: FormattedString = {\n      text:\n        prefix +\n        this.syllables\n          .slice(0, firstMarkedPreparatoryIndex)\n          .join(syllableSeparator)\n    };\n    let nextSyllableIndex = firstMarkedPreparatoryIndex;\n    let lastItalicIndex = onlyMarkFirstPreparatory\n      ? preparatory > 0\n        ? nextSyllableIndex + 1\n        : nextSyllableIndex\n      : firstAccentIndex;\n    let italics = this.syllables.slice(nextSyllableIndex, lastItalicIndex);\n    if (italics.length) {\n      let lastItalic = italics[italics.length - 1];\n      workingString.text += italics[0].getPreText();\n      result.push(workingString);\n      if (italics.length > 1) {\n        workingString = {\n          style: \"italic\",\n          text:\n            italics[0].withoutPreText() +\n            italics.slice(1, -1).join(\"\") +\n            lastItalic.withoutPostText()\n        };\n      } else {\n        workingString = {\n          style: \"italic\",\n          text: italics[0].text\n        };\n      }\n      result.push(workingString);\n      workingString = { text: lastItalic.getPostText() };\n      let nonItalic = this.syllables.slice(lastItalicIndex, firstAccentIndex);\n      workingString.text += nonItalic.join(\"\");\n    }\n    nextSyllableIndex = firstAccentIndex;\n    markedAccents.forEach((accent, i) => {\n      workingString.text += accent.getPreText();\n      result.push(workingString);\n\n      workingString = { style: \"bold\", text: accent.text };\n      result.push(workingString);\n\n      let nextAccent = markedAccents[i + 1];\n      workingString = { text: accent.getPostText() };\n      if (nextAccent) {\n        let nextSyllables = this.syllables.slice(\n          (accent.indexInSegment || 0) + 1,\n          nextAccent.indexInSegment\n        );\n        workingString.text += nextSyllables.join(\"\");\n        nextSyllableIndex = nextAccent.indexInSegment || 0;\n      } else {\n        ++nextSyllableIndex;\n      }\n    });\n    let nextSyllables = this.syllables.slice(nextSyllableIndex);\n    workingString.text += nextSyllables.join(syllableSeparator);\n    workingString.text = workingString.text.replace(/\\s+$/, \"\");\n    if (workingString.text) result.push(workingString);\n    return result;\n  }\n\n  /**\n   * returns GABC for this verse segment\n   * @param psalmTone definition for the psalm tone GABC\n   * @param useIntonation false to ignore intonation, or array to override\n   * @param useFlex \n   * @param stripFlexMediantSymbols \n   * @param useLargeInitial \n   * @param minSylsOnRecitingTone non-negative number, or -1 to require 0 syllables if the intonation ends on the reciting tone, and 1 otherwise\n   * @param language \n   * @param observePause observe pauses in the text that occur on the reciting tone\n   * @returns GABC string\n   */\n  withGabc(\n    psalmTone: GabcPsalmTone,\n    useIntonation: boolean | GabcSingleTone[] = true,\n    useFlex = false,\n    stripFlexMediantSymbols = true,\n    useLargeInitial = false,\n    minSylsOnRecitingTone = 2,\n    language = \"en\",\n    observePause = false,\n  ) {\n    if (this.syllables.length === 0) {\n      return \"\";\n    }\n    let syllables = this.syllables.slice(),\n      {\n        intonation,\n        preparatory,\n        accents,\n        afterLastAccent,\n        tenor,\n        flex\n      } = psalmTone.gabc,\n      result = \"\";\n    if (useLargeInitial && !syllables[0].preText) {\n      syllables = syllables.slice();\n      let firstSyllable = syllables[0];\n      firstSyllable = syllables[0] = new VerseSyllable(\n        firstSyllable.text,\n        firstSyllable.firstOfWord,\n        firstSyllable.lastOfWord,\n        firstSyllable.preText,\n        firstSyllable.postText,\n        firstSyllable.word\n      );\n      if (firstSyllable.lastOfWord && firstSyllable.text.length === 3) {\n        firstSyllable.text = firstSyllable.text.toUpperCase();\n      } else {\n        firstSyllable.text =\n          firstSyllable.text.slice(0, 2).toUpperCase() +\n          firstSyllable.text.slice(2).toLowerCase();\n      }\n    }\n    if (useFlex) {\n      ({ afterLastAccent, preparatory, accents } = psalmTone.getFlexTone(language));\n    }\n    let firstInterestingAccent = this.accentedSyllables[\n        accents.length - 1\n      ],\n      indexOfFirstInterestingAccent = firstInterestingAccent\n        ? firstInterestingAccent.indexInSegment || 0\n        : syllables.length,\n      indexOfFirstPreparatory =\n        indexOfFirstInterestingAccent - preparatory.length;\n      if (indexOfFirstPreparatory < 0) {\n        // there are not enough syllables to cover all the preparatory tones,\n        // so we cut off any unneeded tones from the beginning of the array:\n        preparatory = preparatory.slice(-indexOfFirstPreparatory);\n        indexOfFirstPreparatory = 0;\n      }\n    let syllablesBeforePreparatory = syllables.slice(0, indexOfFirstPreparatory),\n      preparatorySyllables = syllables.slice(\n        indexOfFirstPreparatory,\n        indexOfFirstPreparatory + preparatory.length\n      ),\n      accentedSyllableAndAfter = syllables.slice(\n        indexOfFirstPreparatory + preparatory.length\n      );\n\n    let intonationForkIndex: number;\n    if (useIntonation) {\n      if (minSylsOnRecitingTone === -1) {\n        minSylsOnRecitingTone = intonation[intonation.length - 1].gabc.endsWith(tenor) ? 0 : 1;\n      }\n      if (typeof useIntonation !== 'boolean') {\n        intonation = useIntonation;\n      }\n      intonationForkIndex = intonation.findIndex(tone => tone.toneAccentFork);\n      let syllablesOnRecitingTone =\n        syllablesBeforePreparatory.length - intonation.length + (intonationForkIndex >= 0 ? 1 : 0);\n      if (\n        useFlex &&\n        afterLastAccent.length === 0 &&\n        accents.length === 1 &&\n        accents[0].length === 1 &&\n        accents[0][0].toneAccentFork &&\n        accents[0][0].toneAccentFork[0][0].gabc === tenor\n      ) {\n        ++syllablesOnRecitingTone;\n      }\n      if (syllablesOnRecitingTone < minSylsOnRecitingTone) {\n        useIntonation = false;\n      }\n    }\n\n    // prepare GABC of intonation (if any)\n    if (!useIntonation) intonation = [];\n    if (intonation.length) {\n      if (intonationForkIndex >= 0) {\n        const fork = intonation[intonationForkIndex].toneAccentFork;\n        // in the intonation, a tone accent fork means that we need to consider where accents occur in the intonation syllables\n        const syllablesRequiredFollowingAccent = intonation.length - (intonationForkIndex + 2) + minSylsOnRecitingTone; // Plus Two for the fork itself and the accent following\n        const syllablesToSearchForAccent = syllablesBeforePreparatory.slice(\n          1,\n          Math.min(\n            syllablesBeforePreparatory.length -\n              syllablesRequiredFollowingAccent,\n            1 + intonationForkIndex + fork.length\n          )\n        );\n        const lastUsableAccent = syllablesToSearchForAccent\n          .reverse()\n          .findIndex(\n            (syllable) =>\n              syllable.isAccented ||\n              (syllable.firstOfWord && syllable.lastOfWord)\n          );\n        const accentIndex = lastUsableAccent === -1 ? -1 : syllablesToSearchForAccent.length - 1 - lastUsableAccent;\n        intonation = [\n          ...intonation.slice(0, intonationForkIndex),\n          ...(fork[accentIndex] ?? []),\n          ...intonation.slice(intonationForkIndex + 1),\n        ];\n      }\n      for (let i = 0; i < intonation.length; ++i) {\n        let syl = syllablesBeforePreparatory.shift();\n        if (syl) result += syl.withGabc(intonation[i].gabc);\n      }\n    }\n    // handle all syllables on the reciting tone\n    syllablesBeforePreparatory.forEach(\n      (syl) => (result += syl.withGabc(tenor || \"\", observePause))\n    );\n    // handle preparatory syllables\n    preparatorySyllables.forEach(\n      (syl, i) => (result += syl.withGabc(preparatory[i].gabc))\n    );\n\n    // handle the final accents:\n    let sylI = 0;\n    accents.forEach((accentTones, accentI) => {\n      let nextAccent = this.accentedSyllables[accents.length - 2 - accentI],\n        endSylI = nextAccent\n          ? (nextAccent.indexInSegment || 0) -\n            (accentedSyllableAndAfter[0].indexInSegment || 0)\n          : Math.max(\n              1,\n              accentedSyllableAndAfter.length - afterLastAccent.length\n            );\n      // endSylI points to the next accent or to the first syllable applicable to afterLastAccent\n      let useNonAccentNonOpen = false;\n      if (accentTones.length === 1 && accentTones[0].toneAccentFork) {\n        // toneAccentFork contains [accent on last syllable, accent on penult, accent on antepenult or earlier]:\n        const accentForkIndex = Math.min(2, endSylI - 1);\n        accentTones = accentTones[0].toneAccentFork[accentForkIndex];\n        useNonAccentNonOpen = true;\n      }\n      accentTones.forEach((accentTone, i) => {\n        if (sylI >= endSylI) return;\n        let syl = accentedSyllableAndAfter[sylI];\n        if (accentTone.accent) {\n          // we're looking for an accented syllable\n          if (\n            syl.isAccented ||\n            (sylI + 1 === endSylI && i === accentTones.length - 1)\n          ) {\n            // Use this syllable if it's accented or if we need to use something\n            result += syl.withGabc(accentTone.gabc);\n            ++sylI;\n          } else {\n            console.warn(\"Invalid state when applying psalm tone\");\n          }\n        } else if (accentTone.open) {\n          // take all syllables until the next accent:\n          let accentTonesRemaining = accentTones.length - 1 - i;\n          while (sylI < endSylI - accentTonesRemaining) {\n            result += syl.withGabc(accentTone.gabc);\n            syl = accentedSyllableAndAfter[++sylI];\n          }\n        } else if (useNonAccentNonOpen) {\n          // this is a forked accent tone, so we have already chosen the right one based on the number of syllables present;\n          // just use the tone and the syllable.\n          result += syl.withGabc(accentTone.gabc);\n          ++sylI;\n        }\n      });\n    });\n    let remainingSyllables = accentedSyllableAndAfter.slice(sylI);\n    if (remainingSyllables.length === afterLastAccent.length) {\n      remainingSyllables.forEach(\n        (syl, i) => (result += syl.withGabc(afterLastAccent[i].gabc))\n      );\n    } else if (\n      this.accentedSyllables.length &&\n      (remainingSyllables.length || afterLastAccent.length > 1)\n    ) {\n      // only bother warning if there are actually marked accents in the text\n      // and there are remaining syllables, or more than one syllable after the accent in the psalm tone\n      console.warn(\n        \"Invalid state when applying psalm tone...incorrect number of syllables remaining\"\n      );\n    }\n    if (stripFlexMediantSymbols) result = result.replace(/\\s+[*†]/g, \"\");\n    return result;\n  }\n\n  toString() {\n    return this.words.join(\" \");\n  }\n\n  static splitIntoWords(\n    text: string,\n    syllabify = VerseText.defaultSyllabify,\n    language: Language = 'en',\n  ) {\n    const accentUtils: { [key in Language]: { findWordAccent?: WordAccentFinder, findPhraseAccents?: PhraseAccentFinder }} = {\n      'en': {},\n      'la': { findWordAccent: findLatinWordAccent, findPhraseAccents: findLatinPhraseAccents },\n      'es': { findWordAccent: findSpanishWordAccent, findPhraseAccents: findSpanishPhraseAccents },\n    }  \n    const { findWordAccent, findPhraseAccents } = accentUtils[language];\n    let wordSplit = text\n      .trim()\n      .split(\n        /([ ,;:.!?\"'’”»\\]\\)—–-]*)(?:$|\\s+(\\+\\s+)?|^)(?:\\[?((?:\\d+:\\s*)?\\d+(?:[a-l]\\b)?)\\.?\\]?\\s*)?([\\(\\[«“‘'\"¿¡—–-]*)/\n      );\n    // the text is now split into an array composed of text that didn't match\n    // the regex, followed by the first group of the regex, the second, third, and fourth\n    // group, and repeating.  We add two empty strings to the beginning and end\n    // of this array so that the array has a number of elements that is divisible by 5\n    // and is of the form [number,pre,word,post,pause, number,pre,word,post,pause,...]\n    wordSplit.unshift(\"\", \"\");\n    wordSplit.push(\"\", \"\");\n    let words = [],\n      lastWord,\n      preWord;\n    for (let i = 0; i + 2 < wordSplit.length; i += 5) {\n      const [verseNumber, pre, text, post, pause] = wordSplit.slice(i, i + 5);\n      if (!text) {\n        if (!(pre || post)) {\n          continue;\n        }\n        console.warn(\n          `no word found around ${i + 1} when splitting string ${JSON.stringify(\n            wordSplit\n          )} into words`\n        );\n      }\n      let verseWord = new VerseWord({\n        text,\n        pre,\n        post,\n        pause: !!pause,\n        syllabify,\n        findAccents: findWordAccent,\n        verseNumber\n      });\n      if (verseWord.isActualWord) {\n        if (preWord) {\n          verseWord.addPrePunctuation(preWord.syllables.join(\"\").trim());\n          preWord = null;\n        }\n        words.push(verseWord);\n        lastWord = verseWord;\n      } else if (lastWord) {\n        lastWord.addPunctuation(verseWord.syllables.join(\"\").trim());\n      } else {\n        preWord = verseWord;\n      }\n    }\n    findPhraseAccents?.(words);\n    return words;\n  }\n}\n\ninterface VerseWordArgs {\n  text: string,\n  pre: string,\n  post: string,\n  pause?: boolean,\n  syllabify?: Syllabifier,\n  findAccents?: WordAccentFinder,\n  verseNumber?: string\n};\nexport class VerseWord {\n  isActualWord: boolean;\n  prePunctuation: string;\n  punctuation: string;\n  syllables: VerseSyllable[];\n  verseNumber?: string;\n  pause: boolean;\n\n  constructor({\n    text,\n    pre,\n    post,\n    pause,\n    syllabify = VerseText.defaultSyllabify,\n    findAccents,\n    verseNumber\n  }: VerseWordArgs) {\n    if (verseNumber) this.verseNumber = verseNumber;\n    this.isActualWord = /[a-z]/i.test(text);\n    this.prePunctuation = this.punctuation = \"\";\n    this.pause = !!pause;\n    this.syllables = syllabify(text).map(\n      (syl, i, syllabified) =>\n        new VerseSyllable(\n          syl,\n          i === 0,\n          i === syllabified.length - 1,\n          pre,\n          post,\n          this\n        )\n    );\n    findAccents?.(this.syllables);\n  }\n  /**\n   * adds punctuation that comes after the word, but is separated by a space\n   * @param {string} punctuation punctuation to add following the word\n   */\n  addPunctuation(punctuation: string) {\n    this.syllables[this.syllables.length - 1].postText += \"\\xA0\" + punctuation;\n  }\n  /**\n   * adds punctuation that comes before the word, but is separated by a space\n   * @param {string} prePunctuation punctuation to add before the word\n   */\n  addPrePunctuation(prePunctuation: string) {\n    this.syllables[0].preText =\n      prePunctuation + \"\\xA0\" + this.syllables[0].preText;\n  }\n\n  toString() {\n    return this.syllables.join(\"+\");\n  }\n}\n\nexport class VerseSyllable {\n  text: string;\n  word: VerseWord;\n  firstOfWord: boolean;\n  lastOfWord: boolean;\n  isAccented: boolean;\n  preText: string;\n  postText: string;\n  pause: boolean;\n\n  indexInSegment?: number;\n  indexFromSegmentEnd?: number;\n\n  constructor(\n    sylText: string,\n    firstOfWord: boolean,\n    lastOfWord: boolean,\n    pre: string | null | undefined,\n    post: string | null | undefined,\n    word: VerseWord\n  ) {\n    this.text = sylText;\n    this.word = word;\n    this.firstOfWord = firstOfWord;\n    this.lastOfWord = lastOfWord;\n    this.isAccented = /[áéíóúýǽ́]/i.test(sylText);\n    if (/^\\|[^|]+\\|$/.test(sylText)) {\n      this.text = sylText.slice(1, -1);\n      this.isAccented = true;\n    }\n    this.preText = (firstOfWord && pre) || \"\";\n    this.postText = (lastOfWord && post) || \"\";\n    this.pause = lastOfWord && word.pause;\n  }\n\n  toString() {\n    return (\n      this.preText + this.text + this.postText + (this.lastOfWord ? \" \" : \"\")\n    );\n  }\n  withoutPreText() {\n    return this.text + this.postText + (this.lastOfWord ? \" \" : \"\");\n  }\n  withoutPostText() {\n    return this.preText + this.text;\n  }\n  getPreText() {\n    return this.preText;\n  }\n  getPostText() {\n    return this.postText + (this.lastOfWord ? \" \" : \"\");\n  }\n\n  withGabc(gabc: string, observePause = false) {\n    if (this.pause && observePause) {\n      gabc += \".) (,\";\n    }\n    return (\n      this.preText +\n      this.text +\n      this.postText +\n      `(${gabc})` +\n      (this.lastOfWord ? \"\\n\" : \"\")\n    );\n  }\n}\n","/**\n * shift all notes in GABC by shift (upward if positive, downward if negative)\n * @param gabc string of GABC (without parentheses)\n * @param shift amount to shift\n */\nexport function shiftGabc(gabc: string, shift: number) {\n  return gabc.replace(/([cf]b?[1-4])|([a-m])/gi, (match, clef, c) => {\n    if (clef) return clef;\n    const newC = String.fromCharCode(c.charCodeAt(0) + shift);\n    if (!/[a-m]/i.test(newC)) throw \"cannot be shifted that much\";\n    return newC;\n  });\n}\n","import { VerseSegmentType } from \"./VerseText\";\nimport { shiftGabc } from \"./shiftGabc\";\n\nexport type GabcPsalmTones = GabcPsalmToneChunk & {\n  lines?: (GabcPsalmToneChunk | GabcPsalmTone[])[];\n  isMeinrad: boolean;\n  isGregorianSolemn?: boolean;\n  originalGabc?: string;\n  clef: string;\n};\nexport type GabcPsalmToneChunk = {\n  [VerseSegmentType.Flex]?: GabcPsalmTone;\n  [VerseSegmentType.Mediant]?: GabcPsalmTone;\n  [VerseSegmentType.Termination]: GabcPsalmTone;\n};\nexport type GabcPsalmToneOptions = {\n  treatAsOneAccentWithXPreparatory?: boolean;\n  useFlex?: boolean;\n  isMeinrad?: boolean;\n  isGregorianSolemn?: boolean;\n};\n\nexport type GabcSingleTone = {\n  gabc: string;\n  accent?: boolean;\n  open?: boolean;\n  toneAccentFork?: GabcSingleTone[][];\n};\ntype GabcInfo = {\n  tenor?: string;\n  flex?: string;\n  intonation: GabcSingleTone[];\n  preparatory: GabcSingleTone[];\n  afterLastAccent: GabcSingleTone[];\n  accents: GabcSingleTone[][];\n};\ntype SyllableCounts = {\n  intonation: number;\n  accents: number;\n  preparatory: number;\n  afterLastAccent: number;\n};\n\nexport class GabcPsalmTone {\n  getFlexTone(language: string): GabcInfo {\n    const { tenor, flex } = this.gabc;\n    const tenorFlexDrop = parseInt(tenor, 23) - parseInt(flex, 23);\n    const preparatory = [];\n    let afterLastAccent, accents;\n    if (language === \"la\") {\n      afterLastAccent = [{ gabc: flex ? `${flex}.` : \"\" }];\n      accents = [\n        [\n          { accent: true, gabc: tenor || \"\" },\n          { open: true, gabc: flex || \"\" }\n        ]\n      ];\n    } else {\n      afterLastAccent = [];\n      accents = [\n        [\n          {\n            gabc: \"\",\n            accent: true,\n            toneAccentFork: [\n              [{ gabc: tenorFlexDrop === 1 ? flex : tenor }],\n              [{ gabc: tenor }, { gabc: flex }],\n              [{ gabc: tenor }, { gabc: flex, open: true }]\n            ]\n          }\n        ]\n      ];\n    }\n    return { ...this.gabc, preparatory, accents, afterLastAccent };\n  }\n  /**\n   * Takes gabc like `(jr//////////k//j)(:)(jr////////h///i//g)(::)` or\n   *                 `jr k j : jr h i g ::\n   * and\n   * @param  {string} gabc GABC code for psalm tone\n   * @param  {string} clef GABC clef code\n   * @param  {object} options special options as a hash of booleans:\n   * treatAsOneAccentWithXPreparatory:\n   * @return {{mediant: GabcPsalmTone, termination: GabcPsalmTone}}      object hash with mediant and termination\n   */\n  static getFromGabc(\n    gabc: string,\n    options: GabcPsalmToneOptions = {},\n    clef?: string\n  ): GabcPsalmTones {\n    if (!/\\|/.test(gabc)) {\n      gabc = gabc.replace(/[()]+/g, \" \");\n    }\n    let { useFlex, isGregorianSolemn } = options;\n    if (/(^|\\n)%\\s*flex\\s*\\n/.test(gabc)) {\n      useFlex = true;\n    }\n    if (/(^|\\n)%\\s*gregorianSolemn\\s*\\n/.test(gabc)) {\n      isGregorianSolemn = true;\n    }\n    gabc = gabc.replace(/(^|\\n)(%[^\\n]*\\n)+/g, \"$1\");\n    let originalGabc = gabc;\n    let clefMatch = /^[^a-m]*((?:cb?|f)[1-4])/.exec(gabc);\n    if (clefMatch) {\n      const detectedClef = clefMatch[1],\n        desiredClef = clef;\n      if (clef && clef[0] === detectedClef[0]) {\n        const detectedClefPosition = parseInt(detectedClef.slice(-1)),\n          desiredClefPosition = parseInt(clef.slice(-1)),\n          shift = 2 * (desiredClefPosition - detectedClefPosition);\n        // shift the psalm tone\n        try {\n          gabc = shiftGabc(gabc, shift);\n        } catch (exception) {\n          clef = detectedClef;\n        }\n        if (clef.length !== detectedClef.length) {\n          const newClefHasAccidental = clef.length === 3;\n          // find pitch of accidental based on clef position:\n          const accid = String.fromCharCode(\n            desiredClefPosition * 2 + \"a\".charCodeAt(0)\n          );\n          // can't make a reciting tone to have an accidental, so if that's the case,\n          // just shift the detected clef, without adding or removing the accidental\n          if (new RegExp(`${accid}r`).test(gabc)) {\n            clef = detectedClef.slice(0, -1) + clef.slice(-1);\n          } else if (newClefHasAccidental) {\n            // remove accidentals from the psalm tone, and add naturals to any pitches that weren't marked with a flat\n            gabc = gabc.replace(\n              new RegExp(`([^xy])${accid}([^xy]|$)`, \"g\"),\n              `$1${accid}y${accid}$2`\n            );\n            gabc = gabc.replace(new RegExp(`${accid}x${accid}`, \"g\"), accid);\n          } else {\n            // add accidentals to the psalm tone, since they are no longer in the clef:\n            gabc = gabc.replace(\n              new RegExp(`([^xy])${accid}([^xy]|$)`, \"g\"),\n              `$1${accid}x${accid}`\n            );\n            gabc = gabc.replace(new RegExp(`${accid}y${accid}`, \"g\"), accid);\n          }\n        }\n      } else {\n        clef = detectedClef;\n      }\n      gabc = gabc.slice(clefMatch.index + clefMatch[0].length);\n    } else if (!clef) {\n      clef = \"c4\";\n    }\n    originalGabc = (clef + \" \" + gabc.trim())\n      .replace(/\\(([^|)]+)[^)]*\\)/g, \"$1\") // remove all but the first option from parenthetic option groups, e.g. (option 1|option 2|option 3)\n      .replace(/\\s+([a-m][xy][a-mA-M])/, \"/$1\"); // use a single / instead of whitespace before accidentals\n    if (/'/.test(gabc)) {\n      options.treatAsOneAccentWithXPreparatory = false;\n    };\n    if (!options.treatAsOneAccentWithXPreparatory) {\n      // convert psalm tone GABC notation to something with visible accent marks and reciting tone marked\n      originalGabc = originalGabc\n        .replace(/((?:^|\\n|:)[^\\n:r]*?[a-m]r)([\\s/])/g, \"$10$2\") // convert initial punctum cavum to reciting tone\n        .replace(/(\\s[^'\\s]+)[\\s/]+((?:[a-m][xy])?[a-m]r)([\\s/]+)'([^ /]+)/g, \"$1//////$2[ocba:1{]$3$4[ocba:0}]\") // add bracketed accents\n        .replace(/'((?:[a-m][xy])?[a-m])/g, \"$1r1\") // replace accented puncta with proper code to display accents\n        .replace(/r0\\s+/g,'r0////////') // add extra space after reciting tone\n        .replace(/r\\s+((?:[^r\\s,;:]*\\s+)*)((?:[a-m][xy])?[a-m]r1)/g,'r//////$1$2'); // add extra space between puncta cava and accented tones\n    }\n    gabc = gabc.replace(/\\/{2,}/g, \" \").replace(/::\\s*$/, \"\");\n    let gabcSegments = gabc.split(/\\s+:+\\s+/);\n\n    let gabcPsalmTones = gabcSegments.map((gabc) => {\n      gabc = gabc.trim();\n      if (options.treatAsOneAccentWithXPreparatory && !/'/.test(gabc)) {\n        let match = gabc.match(/\\s(([^\\sr',;:()])+)$/);\n        if (match) {\n          // jr h i g => jr h i 'g gr g\n          gabc =\n            gabc.slice(0, match.index) +\n            \" '\" +\n            match[1] +\n            \" \" +\n            match[2].toLowerCase() +\n            \"r \" +\n            match[2].toLowerCase();\n        }\n      }\n      gabc = gabc.replace(\n        /\\s'?\\(([^r|)]+\\|[^r]*)\\s([^\\sr',;:()])\\)$/,\n        \" '($1 $2r $2)\"\n      );\n      return new GabcPsalmTone(gabc, \"\", !useFlex, clef);\n    });\n    const isMeinrad =\n      !!options.isMeinrad || gabcPsalmTones.length === 2 + 3 + 4 + 5 + 6;\n    const result: GabcPsalmTones = {\n      [VerseSegmentType.Mediant]: gabcPsalmTones[0],\n      [VerseSegmentType.Termination]: gabcPsalmTones[1],\n      isMeinrad,\n      isGregorianSolemn,\n      originalGabc,\n      clef\n    };\n    if (isMeinrad) {\n      if (gabcPsalmTones.length != 2 + 3 + 4 + 5 + 6) {\n        console.warn(\n          `Incorrect number of psalm tone lines given for Meinrad type psalm tone.  Expected 20, but received ${gabcPsalmTones.length}`\n        );\n      }\n      const lines = [];\n      for (let i = 0, count = 2; i < gabcPsalmTones.length; i += count++) {\n        lines[count] = gabcPsalmTones.slice(i, i + count);\n      }\n      result.lines = lines;\n    } else {\n      const lines = (result.lines = []);\n      for (let i = 0; i < gabcPsalmTones.length; i += 2) {\n        const psalmTones: GabcPsalmTones = {\n          [VerseSegmentType.Mediant]: gabcPsalmTones[i],\n          [VerseSegmentType.Termination]: gabcPsalmTones[i + 1],\n          isMeinrad: false,\n          clef\n        };\n        lines.push(psalmTones);\n      }\n    }\n    return result;\n  }\n\n  tones: GabcSingleTone[];\n  clef: string;\n  gabc: GabcInfo;\n  syllableCounts: SyllableCounts;\n\n  static readonly getTonesForGabcString = (gabc) => {\n    let match;\n    let regexToneGabc = /(')?(?:\\(([^)]+)\\)|([^\\sr]+)(r)?)(?=$|\\s)/gi;\n    let tones: GabcSingleTone[] = [];\n    while ((match = regexToneGabc.exec(gabc))) {\n      let result: GabcSingleTone = {\n        accent: match[1] == \"'\",\n        gabc: match[3],\n        open: match[4] == \"r\"\n      };\n      if (match[2]) {\n        result.toneAccentFork = match[2]\n          .split(\"|\")\n          .map((gabc) => GabcPsalmTone.getTonesForGabcString(gabc));\n      }\n      tones.push(result);\n    }\n    return tones;\n  };\n\n  constructor(gabc: string, prefix = \"\", flexEqualsTenor = false, clef = \"c4\") {\n    if (prefix) gabc = prefix + gabc;\n    let tones = (this.tones = GabcPsalmTone.getTonesForGabcString(gabc));\n    var intonation: GabcSingleTone[] = [];\n    var accentedTones: GabcSingleTone[][] = [];\n    var currentAccentTone;\n    var preparatory: GabcSingleTone[] = [];\n    var afterLastAccent: GabcSingleTone[] = [];\n    var state = 3;\n    var lastOpen = undefined;\n    var toneTenor;\n    var toneFlex;\n    for (var i = tones.length - 1; i >= 0; --i) {\n      var ton = tones[i];\n      if (ton.accent) {\n        if (intonation.length > 0) {\n          // if we already have an intonation, then we need to add to it to that, and not to accentedTones\n          intonation.unshift(ton);\n          continue;\n        }\n        currentAccentTone = [ton];\n        accentedTones.unshift(currentAccentTone);\n        state = 1;\n        if (lastOpen) {\n          currentAccentTone.push(lastOpen);\n          lastOpen = undefined;\n        } else if (tones[i - 1].open) {\n          currentAccentTone.unshift(tones[i - 1]);\n          --i;\n        }\n        preparatory = [];\n      } else if (ton.open) {\n        toneTenor = ton.gabc[0];\n        if (state == 3) {\n          // initial state: no accents have been found yet\n          if (accentedTones.length == 0 && (i == 0 || !tones[i - 1].accent)) {\n            // if we got all the way to the beginning or the intonation, what we\n            // had considered to be after the last accent should really be\n            // interpreted as preparatory syllables\n            preparatory = afterLastAccent;\n            afterLastAccent = [];\n          }\n          state = 1;\n        }\n        lastOpen = ton;\n      } else if (state == 3) {\n        // initial state: no accents or puncta cava have been found yet\n        afterLastAccent.unshift(ton);\n      } else if (state == 1) {\n        // state 1 means there has already been found an accent or punctum cavum\n        if (!lastOpen) {\n          // the following tone to this one is an accent, so this must be a\n          // preparatory syllable:\n          preparatory.unshift(ton);\n        } else {\n          // the following tone to this one is a cavum, so this is probably an\n          // intonation syllable, but we won't consider it as such if has the\n          // same GABC code as the the tenor (or if we have already gotten the\n          // last syllable of the intonation)\n          if (intonation.length > 0 || ton.gabc != lastOpen.gabc)\n            intonation.unshift(ton);\n          continue;\n        }\n        lastOpen = undefined;\n      }\n    }\n    if (toneTenor) {\n      if (flexEqualsTenor) {\n        toneFlex = toneTenor;\n      } else {\n        // calculate flex tone based on it being a full tone below the tenor,\n        // unless this would only be a semitone in the psalm tone's clef\n        let clefI = clef[0] == \"f\" ? 6 : 1;\n        clefI += +parseInt(clef.slice(-1)) * 2;\n        let toneNumber = (parseInt(toneTenor, 36) - 10 + 16 - clefI) % 8;\n        let code = toneTenor.charCodeAt(0);\n        code -= toneNumber == 0 || toneNumber == 3 ? 2 : 1;\n        toneFlex = String.fromCharCode(code);\n      }\n    }\n    this.clef = clef;\n    this.gabc = {\n      tenor: toneTenor,\n      flex: toneFlex,\n      intonation,\n      preparatory,\n      afterLastAccent,\n      accents: accentedTones\n    };\n    this.syllableCounts = {\n      intonation: intonation.length,\n      accents: accentedTones.length,\n      preparatory: preparatory.length,\n      afterLastAccent: afterLastAccent.length\n    };\n  }\n}\n","export type GabcWithTitles = {\n  gabc: string;\n  supertitle?: string;\n  title?: string;\n  subtitle?: string;\n};\n\nconst regexClef = /\\([^)]*([cf]b?[1-4])/g;\n\nexport const splitGabcByTitle = (gabc: string): GabcWithTitles[] => {\n  const gabcAndHeaders = gabc.split(/\\s*<h2>([\\s\\S]*?)<\\/h2>\\s*/);\n  // even indices are GABC; odd indices are <h2> tags.\n\n  gabc = gabcAndHeaders[0];\n  const result: GabcWithTitles[] = [{ gabc }];\n  let { clef, isOnlyClef } = getLastClef(gabc);\n  if (isOnlyClef) {\n    result.pop();\n  }\n  for (let i = 1; i < gabcAndHeaders.length; i += 2) {\n    const subtitle = gabcAndHeaders[i];\n    const gabc = `(${clef})` + gabcAndHeaders[i + 1];\n    ({ clef } = getLastClef(gabc));\n    result.push({ gabc, subtitle });\n  }\n  return result;\n};\n\nfunction getLastClef(gabc: string): { clef?: string; isOnlyClef: boolean } {\n  const matches = gabc.match(regexClef);\n  if (matches) {\n    const gabcWithoutWhitespace = gabc.replace(/\\s+/g, \"\");\n    const lastMatch = matches.pop();\n    regexClef.exec(\"\");\n    const clef = regexClef.exec(lastMatch)[1];\n    return {\n      clef,\n      isOnlyClef: gabcWithoutWhitespace === `(${clef})`,\n    };\n  }\n  return {\n    isOnlyClef: false,\n  };\n}\n"],"names":["VerseSegmentType"],"mappings":"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"}